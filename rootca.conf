[ ca ]
default_ca = ca_default

[ ca_default ]
# CA directory
dir              = ./root_ca

# Location of files required by a CA
certs            = $dir/certs
crl_dir          = $dir/crl
new_certs_dir    = $dir/newcerts
database         = $dir/index.txt
serial           = $dir/serial
RANDFILE         = $dir/private/.rand

# Root key and certificate
private_key      = $dir/private/root_ca_key.pem
certificate      = $dir/certs/root_ca_cert.pem

# CRL specific
crlnumber        = $dir/crlnumber
crl              = $dir/crl/ca_crl.pem
crl_extensions   = crl_ext
default_crl_days = 30

# Other options
default_md       = sha256
name_opt         = ca_default
cert_opt         = ca_default
default_days     = 365
preserve         = no
policy           = policy_strict

[policy_strict]
# The Root CA will only sign issuing CA certificates that match (POLICY FORMAT section of `man ca`)
countryName            = match
stateOrProvinceName    = match
localityName           = optional
organizationName       = match
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

[ req ]
# Applied when creating certificate signing requests or certificates
default_bits       = 2048
distinguished_name = req_distinguished_name
string_mask        = utf8only
default_md         = sha256

[ req_distinguished_name ]
# Specifying information required in CSRs with some default
countryName            = Country Name (2 letter code)
stateOrProvinceName    = State or Province Name
localityName           = Locality Name
0.organizationName     = Organization Name
organizationalUnitName = Organizational Unit Name
commonName             = Common Name
emailAddress           = Email Address

# defaults
countryName_default            = DE
stateOrProvinceName_default    = Germany
localityName_default           =
0.organizationName_default     = INNOQ Deutschland GmbH

[ root_ca ] 
# To create Root CA certificate
# Typical CA extensions (`man x509v3_config`)
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true
keyUsage               = critical, cRLSign, keyCertSign

[ issuing_ca ] 
# To create issuing CAs
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true, pathlen:0
keyUsage               = critical, cRLSign, keyCertSign
crlDistributionPoints  = URI:http://cert-dir/root-ca.crl
authorityInfoAccess    = OCSP;URI:http://root-ocsp:2552
authorityInfoAccess    = caIssuers;URI:http://cert-dir/root-ca.cert.der

[ crl_ext ]
# Extensions for CRLs
authorityKeyIdentifier = keyid:always

[ ocsp ]
# Extensions for OCSP certificates
basicConstraints       = critical, CA:false
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
keyUsage               = critical, digitalSignature
extendedKeyUsage       = OCSPSigning
authorityInfoAccess    = caIssuers;URI:http://cert-dir/root-ca.cert.der

